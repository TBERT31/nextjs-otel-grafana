version: '3'

services:
  # Grafana for visualization
  grafana:
    image: grafana/grafana:12.0.2
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    volumes:
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - tempo
      - loki
      - prometheus
      - otel-collector
    networks:
      - app-network

  # Loki for log aggregation
  loki:
    image: grafana/loki:3.5.2
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./infra/loki:/etc/loki
    networks:
      - app-network

  # Promtail for log collection
  promtail:
    image: grafana/promtail:3.5.2
    container_name: promtail
    command: -config.file=/etc/promtail/config.yaml
    volumes:
      - ./infra/promtail:/etc/promtail
      - ./nest-app/logs:/nest-app/logs
      - ./next-app/logs:/next-app/logs
      - ./app/logs:/app/logs
    depends_on:
      - loki
    networks:
      - app-network

  # Tempo for distributed tracing
  tempo:
    image: grafana/tempo:2.8.0
    container_name: tempo
    command: ["-config.file=/etc/tempo/tempo-config.yaml"]
    volumes:
      - ./infra/tempo/tempo-config.yaml:/etc/tempo/tempo-config.yaml
    ports:
      - "3200:3200"  # tempo
    networks:
      - app-network

  # Prometheus for metrics collection
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v3.5.0
    ports:
      - "9090:9090" 
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.130.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./infra/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "8888:8888"  # Prometheus metrics exposition
      - "8889:8889"  # Prometheus exporter metrics
      - "13133:13133" # health check extension
    depends_on:
      - tempo
      - loki
      - prometheus
    networks:
      - app-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=tododb
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Node.js application with OpenTelemetry zero-code instrumentation
  # node-app:
  #   build:
  #     context: ./app
  #     dockerfile: Dockerfile
  #   container_name: node-app
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
  #     - OTEL_SERVICE_NAME=node-app
  #     - OTEL_RESOURCE_ATTRIBUTES=deployment.environment=development,service.version=1.0.0
  #     - OTEL_TRACES_SAMPLER=parentbased_always_on
  #     - OTEL_PROPAGATORS=tracecontext,baggage
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #     - DB_USER=postgres
  #     - DB_PASSWORD=postgres
  #     - DB_NAME=tododb
  #     - LOG_FILE=/logs/node-app.log
  #     - TEMPO_URL=http://tempo:3200
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     otel-collector:
  #       condition: service_started
  #   networks:
  #     - app-network
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"
  #   volumes:
  #     - ./logs:/logs
  #   restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data: